{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Property Price Prediction"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The objective in this case is to build some models to predict the price of properties in dollars.\n",
    "\n",
    "The columns that are added are:\n",
    "\n",
    "* `barrios_match`: if the published neighborhood coincides with the geographical one, it is worth 1, otherwise 0.\n",
    "\n",
    "* `PH`, `apartment`, `house`: binary variables indicating the type of property.\n",
    "\n",
    "* neighborhood dummies: binary variables with 1 or 0 depending on the neighborhood.\n",
    "\n",
    "The metric that we are going to use to measure is RMSE (root mean square error), whose formula is:\n",
    "\n",
    "$$RMSE = \\sqrt{\\frac{\\sum_{t=1}^n (\\hat y_t - y_t)^2}{n}}$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "pd.set_option('display.float_format', lambda x: '%.3f' % x)\n",
    "path_dataset = 'dataset/datos_properati_limpios_model.csv'\n",
    "df = pd.read_csv(path_dataset)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The dataset we are going to work with here has 6376 observations\n"
     ]
    }
   ],
   "source": [
    "print(\"The dataset we are going to work with here has {} observations\".format(df.shape[0]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The objective of this project is to be able to work on the adjustment of models and their subsequent evaluation."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To start with we are going to separate the `dataset` into a training set (80%) and a test set (20%)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(5100, 58)\n",
      "(1276, 58)\n",
      "(5100,)\n",
      "(1276,)\n"
     ]
    }
   ],
   "source": [
    "X = df.drop(['price_aprox_usd'], axis=1)\n",
    "y = df['price_aprox_usd']\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=42)\n",
    "print(X_train.shape)\n",
    "print(X_test.shape)\n",
    "print(y_train.shape)\n",
    "print(y_test.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Decision trees\n",
    "\n",
    "The first thing we are going to do is train a decision tree and use the `RMSE` as a metric.\n",
    "\n",
    "In order to obtain the **RMSE** we are going to measure the `mean_squared_error` and obtain its square root."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DecisionTreeRegressor()"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.tree import DecisionTreeRegressor\n",
    "\n",
    "clr=DecisionTreeRegressor()\n",
    "\n",
    "clr.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred= clr.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test data error: 25381.179084172716\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "from sklearn.metrics import mean_squared_error\n",
    "print('Test data error:', np.sqrt(mean_squared_error(y_test, y_pred)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__We analyze the change in the RMSE as the decision tree goes deeper, both in training and in testing.__\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Prof_árbol:  1  RMSE_Train:  26884.06654887286  RMSE_Test:  26295.14025353065\n",
      "Prof_árbol:  6  RMSE_Train:  20287.874363151426  RMSE_Test:  22001.06479177229\n",
      "Prof_árbol:  11  RMSE_Train:  14100.971579882917  RMSE_Test:  22198.23216021985\n",
      "Prof_árbol:  16  RMSE_Train:  6386.51360970568  RMSE_Test:  24810.82994433217\n",
      "Prof_árbol:  21  RMSE_Train:  1936.4326018182915  RMSE_Test:  24878.42606451514\n",
      "Prof_árbol:  26  RMSE_Train:  569.2369612090697  RMSE_Test:  25110.915076100373\n"
     ]
    }
   ],
   "source": [
    "rmses_train=list()\n",
    "rmses_test=list()\n",
    "for i in range(1,30,5):\n",
    "    clr=DecisionTreeRegressor(max_depth=i)\n",
    "    clr.fit(X_train, y_train)\n",
    "    y_pred_train= clr.predict(X_train)\n",
    "    y_pred_test= clr.predict(X_test)\n",
    "    rmses_train.append(np.sqrt(mean_squared_error(y_train, y_pred_train)))\n",
    "    rmses_test.append(np.sqrt(mean_squared_error(y_test, y_pred_test)))\n",
    "    print(\"Prof_árbol: \",i,\" RMSE_Train: \",rmses_train[-1],\" RMSE_Test: \",rmses_test[-1])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we plot the values we store in the `rmses_train` and `rmses_test` arrays"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline \n",
    "plt.plot(range(1,30, 5), rmses_train, label='RMSE Training')\n",
    "plt.plot(range(1,30, 5), rmses_test, label='RMSE Testing')\n",
    "plt.ylim((0, 30000))\n",
    "plt.legend(loc=\"best\")\n",
    "plt.title(\"RMSE Training vs RMSE Testing to decision trees\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can see how the model presents overfitting given that the greater the complexity (in this case, the greater the depth of the tree), the greater the difference between the training and testing results. We also observe how the test curve decreases and then grows again. The point where it is minimized is related to the tradeoff between bias and variance."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## KNN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test data error: 22727.066891481725\n"
     ]
    }
   ],
   "source": [
    "from sklearn.neighbors import KNeighborsRegressor\n",
    "KNR = KNeighborsRegressor()\n",
    "KNR.fit(X_train, y_train)\n",
    "y_pred2= KNR.predict(X_test)\n",
    "print('Test data error:', np.sqrt(mean_squared_error(y_test, y_pred2)))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__We analyze the change in the RMSE as we consider more neighbors for KNN, both in training and testing.__"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Prof_árbol:  1  RMSE_Train:  717.7083160050084  RMSE_Test:  26302.546026975586\n",
      "Prof_árbol:  2  RMSE_Train:  13744.27645021367  RMSE_Test:  24376.729279562856\n",
      "Prof_árbol:  3  RMSE_Train:  16556.355585283312  RMSE_Test:  23321.12872900348\n",
      "Prof_árbol:  4  RMSE_Train:  17828.0804908624  RMSE_Test:  23024.749507719047\n",
      "Prof_árbol:  5  RMSE_Train:  18749.65485686572  RMSE_Test:  22727.066891481725\n",
      "Prof_árbol:  6  RMSE_Train:  19293.53476129679  RMSE_Test:  22729.321058273374\n",
      "Prof_árbol:  7  RMSE_Train:  19796.210808083546  RMSE_Test:  22620.508480150987\n",
      "Prof_árbol:  8  RMSE_Train:  20138.441885972545  RMSE_Test:  22634.475030522437\n",
      "Prof_árbol:  9  RMSE_Train:  20469.191491789392  RMSE_Test:  22608.699436600968\n",
      "Prof_árbol:  10  RMSE_Train:  20702.454814311557  RMSE_Test:  22568.53991701884\n",
      "Prof_árbol:  11  RMSE_Train:  20912.920413517786  RMSE_Test:  22480.373999236443\n",
      "Prof_árbol:  12  RMSE_Train:  21139.25857724549  RMSE_Test:  22440.823412272603\n",
      "Prof_árbol:  13  RMSE_Train:  21272.36648256955  RMSE_Test:  22455.925289371477\n",
      "Prof_árbol:  14  RMSE_Train:  21365.19390647995  RMSE_Test:  22566.454496812607\n",
      "Prof_árbol:  15  RMSE_Train:  21441.48106790555  RMSE_Test:  22565.7433790329\n",
      "Prof_árbol:  16  RMSE_Train:  21574.347870939924  RMSE_Test:  22525.367992523355\n",
      "Prof_árbol:  17  RMSE_Train:  21669.255621649016  RMSE_Test:  22483.508700287366\n",
      "Prof_árbol:  18  RMSE_Train:  21772.340997345884  RMSE_Test:  22497.80496482463\n",
      "Prof_árbol:  19  RMSE_Train:  21858.709622967297  RMSE_Test:  22527.707531448927\n",
      "Prof_árbol:  20  RMSE_Train:  21967.38592777828  RMSE_Test:  22537.095179049265\n",
      "Prof_árbol:  21  RMSE_Train:  22062.292434615374  RMSE_Test:  22518.005966296107\n",
      "Prof_árbol:  22  RMSE_Train:  22142.853516730414  RMSE_Test:  22500.157984271766\n",
      "Prof_árbol:  23  RMSE_Train:  22232.77755092912  RMSE_Test:  22503.01786207672\n",
      "Prof_árbol:  24  RMSE_Train:  22303.04267334381  RMSE_Test:  22513.496580346156\n",
      "Prof_árbol:  25  RMSE_Train:  22392.491746927866  RMSE_Test:  22565.200173884758\n",
      "Prof_árbol:  26  RMSE_Train:  22470.948989946046  RMSE_Test:  22651.07562030265\n",
      "Prof_árbol:  27  RMSE_Train:  22526.52793064176  RMSE_Test:  22660.02075507097\n",
      "Prof_árbol:  28  RMSE_Train:  22566.674948937973  RMSE_Test:  22704.41515222455\n",
      "Prof_árbol:  29  RMSE_Train:  22623.434086551813  RMSE_Test:  22730.19488596323\n"
     ]
    }
   ],
   "source": [
    "rmses_train2=list()\n",
    "rmses_test2=list()\n",
    "for i in range(1,30,1):\n",
    "    KNR = KNeighborsRegressor(n_neighbors =i)\n",
    "    KNR.fit(X_train, y_train)\n",
    "    y_pred_train= KNR.predict(X_train)\n",
    "    y_pred_test= KNR.predict(X_test)\n",
    "    rmses_train2.append(np.sqrt(mean_squared_error(y_train, y_pred_train)))\n",
    "    rmses_test2.append(np.sqrt(mean_squared_error(y_test, y_pred_test)))\n",
    "    print(\"Prof_árbol: \",i,\" RMSE_Train: \",rmses_train2[-1],\" RMSE_Test: \",rmses_test2[-1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(range(1,30, 1), rmses_train2, label='RMSE Training')\n",
    "plt.plot(range(1,30, 1), rmses_test2, label='RMSE Testing')\n",
    "plt.ylim((0, 30000))\n",
    "plt.legend(loc=\"best\")\n",
    "plt.title(\"RMSE Training vs RMSE Testing to KNN\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**We will calculate the average RMSE of the cross validation result for a decision tree.\n",
    "As parameters we will use:**\n",
    "- 10 folds\n",
    "- depth 5\n",
    "- scoring neg_mean_squared_error.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.tree import DecisionTreeRegressor\n",
    "from sklearn.model_selection import cross_val_score\n",
    "\n",
    "regressor= DecisionTreeRegressor(max_depth=5)\n",
    "scores = cross_val_score(regressor, X_train, y_train,\n",
    "                             scoring=\"neg_mean_squared_error\", cv=10)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "def nmsq2rmse(scores):\n",
    "    return np.sqrt(-scores)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-4.55379022e+08, -4.47550255e+08, -5.15974353e+08, -4.65436915e+08,\n",
       "       -5.11563221e+08, -5.34552234e+08, -4.71181433e+08, -4.81852513e+08,\n",
       "       -4.49061048e+08, -4.99971258e+08])"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "scores"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To see the final result, we retrain the regressor and show in a dataframe the comparison between the real values, the predicted ones and their difference"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "regressor.fit(X_train, y_train)\n",
    "y_pred = regressor.predict(X_test)\n",
    "val_real = pd.Series(y_test.values)\n",
    "val_pred = pd.Series(y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "predicciones = pd.concat([val_real.rename('Real value'),val_pred.rename('Pred value') ,abs(val_real-val_pred).rename('Dif(+/-)')] ,  axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Real value</th>\n",
       "      <th>Pred value</th>\n",
       "      <th>Dif(+/-)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>80000.000</td>\n",
       "      <td>108426.872</td>\n",
       "      <td>28426.872</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>128000.000</td>\n",
       "      <td>151372.531</td>\n",
       "      <td>23372.531</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>150000.000</td>\n",
       "      <td>151372.531</td>\n",
       "      <td>1372.531</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>85000.000</td>\n",
       "      <td>99219.122</td>\n",
       "      <td>14219.122</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>135000.000</td>\n",
       "      <td>130337.039</td>\n",
       "      <td>4662.961</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>135000.000</td>\n",
       "      <td>119967.914</td>\n",
       "      <td>15032.086</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>68000.000</td>\n",
       "      <td>87243.666</td>\n",
       "      <td>19243.666</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>110000.000</td>\n",
       "      <td>128379.238</td>\n",
       "      <td>18379.238</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>134000.000</td>\n",
       "      <td>154167.172</td>\n",
       "      <td>20167.172</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>110000.000</td>\n",
       "      <td>85248.777</td>\n",
       "      <td>24751.223</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Real value  Pred value  Dif(+/-)\n",
       "0   80000.000  108426.872 28426.872\n",
       "1  128000.000  151372.531 23372.531\n",
       "2  150000.000  151372.531  1372.531\n",
       "3   85000.000   99219.122 14219.122\n",
       "4  135000.000  130337.039  4662.961\n",
       "5  135000.000  119967.914 15032.086\n",
       "6   68000.000   87243.666 19243.666\n",
       "7  110000.000  128379.238 18379.238\n",
       "8  134000.000  154167.172 20167.172\n",
       "9  110000.000   85248.777 24751.223"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predicciones.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
